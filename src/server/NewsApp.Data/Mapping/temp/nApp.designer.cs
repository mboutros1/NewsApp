#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace nApp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class NewsApp : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChurches(Churches instance);
    partial void UpdateChurches(Churches instance);
    partial void DeleteChurches(Churches instance);
    partial void InsertComments(Comments instance);
    partial void UpdateComments(Comments instance);
    partial void DeleteComments(Comments instance);
    partial void InsertNewsFeeds(NewsFeeds instance);
    partial void UpdateNewsFeeds(NewsFeeds instance);
    partial void DeleteNewsFeeds(NewsFeeds instance);
    partial void InsertNotifications(Notifications instance);
    partial void UpdateNotifications(Notifications instance);
    partial void DeleteNotifications(Notifications instance);
    partial void InsertUserNotifications(UserNotifications instance);
    partial void UpdateUserNotifications(UserNotifications instance);
    partial void DeleteUserNotifications(UserNotifications instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertUsers_Churches(Users_Churches instance);
    partial void UpdateUsers_Churches(Users_Churches instance);
    partial void DeleteUsers_Churches(Users_Churches instance);
    #endregion
		
		public NewsApp(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NewsApp(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NewsApp(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NewsApp(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Churches> Churches
		{
			get
			{
				return this.GetTable<Churches>();
			}
		}
		
		public System.Data.Linq.Table<Comments> Comments
		{
			get
			{
				return this.GetTable<Comments>();
			}
		}
		
		public System.Data.Linq.Table<NewsFeeds> NewsFeeds
		{
			get
			{
				return this.GetTable<NewsFeeds>();
			}
		}
		
		public System.Data.Linq.Table<Notifications> Notifications
		{
			get
			{
				return this.GetTable<Notifications>();
			}
		}
		
		public System.Data.Linq.Table<UserNotifications> UserNotifications
		{
			get
			{
				return this.GetTable<UserNotifications>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Users_Churches> Users_Churches
		{
			get
			{
				return this.GetTable<Users_Churches>();
			}
		}
		
		[Function(Name="dbo.fn_diagramobjects", IsComposable=true)]
		[return: Parameter(DbType="Int")]
		public System.Nullable<int> Fn_diagramobjects()
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.sp_alterdiagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_alterdiagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="Int")] System.Nullable<int> version, [Parameter(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_creatediagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_creatediagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="Int")] System.Nullable<int> version, [Parameter(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_dropdiagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_dropdiagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_helpdiagramdefinition")]
		public ISingleResult<Sp_helpdiagramdefinitionResult> Sp_helpdiagramdefinition([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramdefinitionResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_helpdiagrams")]
		public ISingleResult<Sp_helpdiagramsResult> Sp_helpdiagrams([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_renamediagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_renamediagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="NVarChar(128)")] string new_diagramname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, new_diagramname);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Churches")]
	public partial class Churches : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChurchId;
		
		private string _DisplayName;
		
		private string _Address;
		
		private string _ZipCode;
		
		private string _State;
		
		private string _City;
		
		private string _Country;
		
		private System.Nullable<long> _Latitude;
		
		private System.Nullable<long> _Longitude;
		
		private EntitySet<Notifications> _Notifications;
		
		private EntitySet<Users_Churches> _Users_Churches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChurchIdChanging(int value);
    partial void OnChurchIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnLatitudeChanging(System.Nullable<long> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<long> value);
    partial void OnLongitudeChanged();
    #endregion
		
		public Churches()
		{
			this._Notifications = new EntitySet<Notifications>(new Action<Notifications>(this.attach_Notifications), new Action<Notifications>(this.detach_Notifications));
			this._Users_Churches = new EntitySet<Users_Churches>(new Action<Users_Churches>(this.attach_Users_Churches), new Action<Users_Churches>(this.detach_Users_Churches));
			OnCreated();
		}
		
		[Column(Storage="_ChurchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChurchId
		{
			get
			{
				return this._ChurchId;
			}
			set
			{
				if ((this._ChurchId != value))
				{
					this.OnChurchIdChanging(value);
					this.SendPropertyChanging();
					this._ChurchId = value;
					this.SendPropertyChanged("ChurchId");
					this.OnChurchIdChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayName", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="BigInt")]
		public System.Nullable<long> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="BigInt")]
		public System.Nullable<long> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Association(Name="FK_Notifications_Churches_0", Storage="_Notifications", ThisKey="ChurchId", OtherKey="ChurchId", DeleteRule="NO ACTION")]
		public EntitySet<Notifications> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[Association(Name="FK_Users_Churches_Churches_1", Storage="_Users_Churches", ThisKey="ChurchId", OtherKey="ChurchId", DeleteRule="NO ACTION")]
		public EntitySet<Users_Churches> Users_Churches
		{
			get
			{
				return this._Users_Churches;
			}
			set
			{
				this._Users_Churches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notifications(Notifications entity)
		{
			this.SendPropertyChanging();
			entity.Churches = this;
		}
		
		private void detach_Notifications(Notifications entity)
		{
			this.SendPropertyChanging();
			entity.Churches = null;
		}
		
		private void attach_Users_Churches(Users_Churches entity)
		{
			this.SendPropertyChanging();
			entity.Churches = this;
		}
		
		private void detach_Users_Churches(Users_Churches entity)
		{
			this.SendPropertyChanging();
			entity.Churches = null;
		}
	}
	
	[Table(Name="dbo.Comments")]
	public partial class Comments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentId;
		
		private string _Body;
		
		private System.DateTime _CreateDate;
		
		private string _Images;
		
		private int _NotificationId;
		
		private int _UserId;
		
		private EntityRef<Notifications> _Notifications;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnImagesChanging(string value);
    partial void OnImagesChanged();
    partial void OnNotificationIdChanging(int value);
    partial void OnNotificationIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public Comments()
		{
			this._Notifications = default(EntityRef<Notifications>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[Column(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="VarChar(8000)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime2(7) NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Images", DbType="VarChar(8000)")]
		public string Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				if ((this._Images != value))
				{
					this.OnImagesChanging(value);
					this.SendPropertyChanging();
					this._Images = value;
					this.SendPropertyChanged("Images");
					this.OnImagesChanged();
				}
			}
		}
		
		[Column(Storage="_NotificationId", DbType="Int NOT NULL")]
		public int NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					if (this._Notifications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="FK_Comments_Notifications_0", Storage="_Notifications", ThisKey="NotificationId", OtherKey="NotificationId", IsForeignKey=true)]
		public Notifications Notifications
		{
			get
			{
				return this._Notifications.Entity;
			}
			set
			{
				Notifications previousValue = this._Notifications.Entity;
				if (((previousValue != value) 
							|| (this._Notifications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notifications.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Notifications.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._NotificationId = value.NotificationId;
					}
					else
					{
						this._NotificationId = default(int);
					}
					this.SendPropertyChanged("Notifications");
				}
			}
		}
		
		[Association(Name="FK_Comments_Users_1", Storage="_Users", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NewsFeeds")]
	public partial class NewsFeeds : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsFeedId;
		
		private string _Title;
		
		private string _Body;
		
		private string _Images;
		
		private string _CreateDate;
		
		private int _NotificationId;
		
		private EntityRef<Notifications> _Notifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsFeedIdChanging(int value);
    partial void OnNewsFeedIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnImagesChanging(string value);
    partial void OnImagesChanged();
    partial void OnCreateDateChanging(string value);
    partial void OnCreateDateChanged();
    partial void OnNotificationIdChanging(int value);
    partial void OnNotificationIdChanged();
    #endregion
		
		public NewsFeeds()
		{
			this._Notifications = default(EntityRef<Notifications>);
			OnCreated();
		}
		
		[Column(Storage="_NewsFeedId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsFeedId
		{
			get
			{
				return this._NewsFeedId;
			}
			set
			{
				if ((this._NewsFeedId != value))
				{
					this.OnNewsFeedIdChanging(value);
					this.SendPropertyChanging();
					this._NewsFeedId = value;
					this.SendPropertyChanged("NewsFeedId");
					this.OnNewsFeedIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="VarChar(8000)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_Images", DbType="VarChar(8000)")]
		public string Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				if ((this._Images != value))
				{
					this.OnImagesChanging(value);
					this.SendPropertyChanging();
					this._Images = value;
					this.SendPropertyChanged("Images");
					this.OnImagesChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_NotificationId", DbType="Int NOT NULL")]
		public int NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					if (this._Notifications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Association(Name="FK_NewsFeeds_Notifications_0", Storage="_Notifications", ThisKey="NotificationId", OtherKey="NotificationId", IsForeignKey=true)]
		public Notifications Notifications
		{
			get
			{
				return this._Notifications.Entity;
			}
			set
			{
				Notifications previousValue = this._Notifications.Entity;
				if (((previousValue != value) 
							|| (this._Notifications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notifications.Entity = null;
						previousValue.NewsFeeds.Remove(this);
					}
					this._Notifications.Entity = value;
					if ((value != null))
					{
						value.NewsFeeds.Add(this);
						this._NotificationId = value.NotificationId;
					}
					else
					{
						this._NotificationId = default(int);
					}
					this.SendPropertyChanged("Notifications");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Notifications")]
	public partial class Notifications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NotificationId;
		
		private string _Title;
		
		private string _Details;
		
		private System.DateTime _CreateDate;
		
		private int _Type;
		
		private int _Likes;
		
		private string _Images;
		
		private System.Nullable<System.DateTime> _ScheduleDate;
		
		private bool _IsSent;
		
		private int _ChurchId;
		
		private EntitySet<Comments> _Comments;
		
		private EntitySet<NewsFeeds> _NewsFeeds;
		
		private EntityRef<Churches> _Churches;
		
		private EntitySet<UserNotifications> _UserNotifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIdChanging(int value);
    partial void OnNotificationIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnLikesChanging(int value);
    partial void OnLikesChanged();
    partial void OnImagesChanging(string value);
    partial void OnImagesChanged();
    partial void OnScheduleDateChanging(System.Nullable<System.DateTime> value);
    partial void OnScheduleDateChanged();
    partial void OnIsSentChanging(bool value);
    partial void OnIsSentChanged();
    partial void OnChurchIdChanging(int value);
    partial void OnChurchIdChanged();
    #endregion
		
		public Notifications()
		{
			this._Comments = new EntitySet<Comments>(new Action<Comments>(this.attach_Comments), new Action<Comments>(this.detach_Comments));
			this._NewsFeeds = new EntitySet<NewsFeeds>(new Action<NewsFeeds>(this.attach_NewsFeeds), new Action<NewsFeeds>(this.detach_NewsFeeds));
			this._Churches = default(EntityRef<Churches>);
			this._UserNotifications = new EntitySet<UserNotifications>(new Action<UserNotifications>(this.attach_UserNotifications), new Action<UserNotifications>(this.detach_UserNotifications));
			OnCreated();
		}
		
		[Column(Storage="_NotificationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime2(7) NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Likes", DbType="Int NOT NULL")]
		public int Likes
		{
			get
			{
				return this._Likes;
			}
			set
			{
				if ((this._Likes != value))
				{
					this.OnLikesChanging(value);
					this.SendPropertyChanging();
					this._Likes = value;
					this.SendPropertyChanged("Likes");
					this.OnLikesChanged();
				}
			}
		}
		
		[Column(Storage="_Images", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				if ((this._Images != value))
				{
					this.OnImagesChanging(value);
					this.SendPropertyChanging();
					this._Images = value;
					this.SendPropertyChanged("Images");
					this.OnImagesChanged();
				}
			}
		}
		
		[Column(Storage="_ScheduleDate", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> ScheduleDate
		{
			get
			{
				return this._ScheduleDate;
			}
			set
			{
				if ((this._ScheduleDate != value))
				{
					this.OnScheduleDateChanging(value);
					this.SendPropertyChanging();
					this._ScheduleDate = value;
					this.SendPropertyChanged("ScheduleDate");
					this.OnScheduleDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsSent", DbType="Bit NOT NULL")]
		public bool IsSent
		{
			get
			{
				return this._IsSent;
			}
			set
			{
				if ((this._IsSent != value))
				{
					this.OnIsSentChanging(value);
					this.SendPropertyChanging();
					this._IsSent = value;
					this.SendPropertyChanged("IsSent");
					this.OnIsSentChanged();
				}
			}
		}
		
		[Column(Storage="_ChurchId", DbType="Int NOT NULL")]
		public int ChurchId
		{
			get
			{
				return this._ChurchId;
			}
			set
			{
				if ((this._ChurchId != value))
				{
					if (this._Churches.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChurchIdChanging(value);
					this.SendPropertyChanging();
					this._ChurchId = value;
					this.SendPropertyChanged("ChurchId");
					this.OnChurchIdChanged();
				}
			}
		}
		
		[Association(Name="FK_Comments_Notifications_0", Storage="_Comments", ThisKey="NotificationId", OtherKey="NotificationId", DeleteRule="NO ACTION")]
		public EntitySet<Comments> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="FK_NewsFeeds_Notifications_0", Storage="_NewsFeeds", ThisKey="NotificationId", OtherKey="NotificationId", DeleteRule="NO ACTION")]
		public EntitySet<NewsFeeds> NewsFeeds
		{
			get
			{
				return this._NewsFeeds;
			}
			set
			{
				this._NewsFeeds.Assign(value);
			}
		}
		
		[Association(Name="FK_Notifications_Churches_0", Storage="_Churches", ThisKey="ChurchId", OtherKey="ChurchId", IsForeignKey=true)]
		public Churches Churches
		{
			get
			{
				return this._Churches.Entity;
			}
			set
			{
				Churches previousValue = this._Churches.Entity;
				if (((previousValue != value) 
							|| (this._Churches.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Churches.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._Churches.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._ChurchId = value.ChurchId;
					}
					else
					{
						this._ChurchId = default(int);
					}
					this.SendPropertyChanged("Churches");
				}
			}
		}
		
		[Association(Name="FK_UserNotifications_Notifications_1", Storage="_UserNotifications", ThisKey="NotificationId", OtherKey="NotificationId", DeleteRule="NO ACTION")]
		public EntitySet<UserNotifications> UserNotifications
		{
			get
			{
				return this._UserNotifications;
			}
			set
			{
				this._UserNotifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comments entity)
		{
			this.SendPropertyChanging();
			entity.Notifications = this;
		}
		
		private void detach_Comments(Comments entity)
		{
			this.SendPropertyChanging();
			entity.Notifications = null;
		}
		
		private void attach_NewsFeeds(NewsFeeds entity)
		{
			this.SendPropertyChanging();
			entity.Notifications = this;
		}
		
		private void detach_NewsFeeds(NewsFeeds entity)
		{
			this.SendPropertyChanging();
			entity.Notifications = null;
		}
		
		private void attach_UserNotifications(UserNotifications entity)
		{
			this.SendPropertyChanging();
			entity.Notifications = this;
		}
		
		private void detach_UserNotifications(UserNotifications entity)
		{
			this.SendPropertyChanging();
			entity.Notifications = null;
		}
	}
	
	[Table(Name="dbo.UserNotifications")]
	public partial class UserNotifications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserNotificationId;
		
		private System.Nullable<System.DateTime> _LastSeen;
		
		private System.Nullable<System.DateTime> _SentDate;
		
		private int _UserId;
		
		private int _NotificationId;
		
		private EntityRef<Notifications> _Notifications;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNotificationIdChanging(int value);
    partial void OnUserNotificationIdChanged();
    partial void OnLastSeenChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSeenChanged();
    partial void OnSentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSentDateChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnNotificationIdChanging(int value);
    partial void OnNotificationIdChanged();
    #endregion
		
		public UserNotifications()
		{
			this._Notifications = default(EntityRef<Notifications>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[Column(Storage="_UserNotificationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserNotificationId
		{
			get
			{
				return this._UserNotificationId;
			}
			set
			{
				if ((this._UserNotificationId != value))
				{
					this.OnUserNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._UserNotificationId = value;
					this.SendPropertyChanged("UserNotificationId");
					this.OnUserNotificationIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastSeen", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> LastSeen
		{
			get
			{
				return this._LastSeen;
			}
			set
			{
				if ((this._LastSeen != value))
				{
					this.OnLastSeenChanging(value);
					this.SendPropertyChanging();
					this._LastSeen = value;
					this.SendPropertyChanged("LastSeen");
					this.OnLastSeenChanged();
				}
			}
		}
		
		[Column(Storage="_SentDate", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> SentDate
		{
			get
			{
				return this._SentDate;
			}
			set
			{
				if ((this._SentDate != value))
				{
					this.OnSentDateChanging(value);
					this.SendPropertyChanging();
					this._SentDate = value;
					this.SendPropertyChanged("SentDate");
					this.OnSentDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_NotificationId", DbType="Int NOT NULL")]
		public int NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					if (this._Notifications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[Association(Name="FK_UserNotifications_Notifications_1", Storage="_Notifications", ThisKey="NotificationId", OtherKey="NotificationId", IsForeignKey=true)]
		public Notifications Notifications
		{
			get
			{
				return this._Notifications.Entity;
			}
			set
			{
				Notifications previousValue = this._Notifications.Entity;
				if (((previousValue != value) 
							|| (this._Notifications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notifications.Entity = null;
						previousValue.UserNotifications.Remove(this);
					}
					this._Notifications.Entity = value;
					if ((value != null))
					{
						value.UserNotifications.Add(this);
						this._NotificationId = value.NotificationId;
					}
					else
					{
						this._NotificationId = default(int);
					}
					this.SendPropertyChanged("Notifications");
				}
			}
		}
		
		[Association(Name="FK_UserNotifications_Users_0", Storage="_Users", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.UserNotifications.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.UserNotifications.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _DeviceId;
		
		private string _DeviceType;
		
		private System.DateTime _CreateDate;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _Avatar;
		
		private string _Name;
		
		private EntitySet<Comments> _Comments;
		
		private EntitySet<UserNotifications> _UserNotifications;
		
		private EntitySet<Users_Churches> _Users_Churches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDeviceIdChanging(string value);
    partial void OnDeviceIdChanged();
    partial void OnDeviceTypeChanging(string value);
    partial void OnDeviceTypeChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Users()
		{
			this._Comments = new EntitySet<Comments>(new Action<Comments>(this.attach_Comments), new Action<Comments>(this.detach_Comments));
			this._UserNotifications = new EntitySet<UserNotifications>(new Action<UserNotifications>(this.attach_UserNotifications), new Action<UserNotifications>(this.detach_UserNotifications));
			this._Users_Churches = new EntitySet<Users_Churches>(new Action<Users_Churches>(this.attach_Users_Churches), new Action<Users_Churches>(this.detach_Users_Churches));
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceId", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string DeviceId
		{
			get
			{
				return this._DeviceId;
			}
			set
			{
				if ((this._DeviceId != value))
				{
					this.OnDeviceIdChanging(value);
					this.SendPropertyChanging();
					this._DeviceId = value;
					this.SendPropertyChanged("DeviceId");
					this.OnDeviceIdChanged();
				}
			}
		}
		
		[Column(Storage="_DeviceType", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string DeviceType
		{
			get
			{
				return this._DeviceType;
			}
			set
			{
				if ((this._DeviceType != value))
				{
					this.OnDeviceTypeChanging(value);
					this.SendPropertyChanging();
					this._DeviceType = value;
					this.SendPropertyChanged("DeviceType");
					this.OnDeviceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime2(7) NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastModified", DbType="DateTime2(7)")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Avatar", DbType="VarChar(8000)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(8000)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_Comments_Users_1", Storage="_Comments", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
		public EntitySet<Comments> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="FK_UserNotifications_Users_0", Storage="_UserNotifications", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
		public EntitySet<UserNotifications> UserNotifications
		{
			get
			{
				return this._UserNotifications;
			}
			set
			{
				this._UserNotifications.Assign(value);
			}
		}
		
		[Association(Name="FK_Users_Churches_Users_0", Storage="_Users_Churches", ThisKey="UserId", OtherKey="UserId", DeleteRule="NO ACTION")]
		public EntitySet<Users_Churches> Users_Churches
		{
			get
			{
				return this._Users_Churches;
			}
			set
			{
				this._Users_Churches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comments entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Comments(Comments entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_UserNotifications(UserNotifications entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_UserNotifications(UserNotifications entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Users_Churches(Users_Churches entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Users_Churches(Users_Churches entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[Table(Name="dbo.Users_Churches")]
	public partial class Users_Churches : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _ChurchId;
		
		private EntityRef<Churches> _Churches;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnChurchIdChanging(int value);
    partial void OnChurchIdChanged();
    #endregion
		
		public Users_Churches()
		{
			this._Churches = default(EntityRef<Churches>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChurchId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ChurchId
		{
			get
			{
				return this._ChurchId;
			}
			set
			{
				if ((this._ChurchId != value))
				{
					if (this._Churches.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChurchIdChanging(value);
					this.SendPropertyChanging();
					this._ChurchId = value;
					this.SendPropertyChanged("ChurchId");
					this.OnChurchIdChanged();
				}
			}
		}
		
		[Association(Name="FK_Users_Churches_Churches_1", Storage="_Churches", ThisKey="ChurchId", OtherKey="ChurchId", IsForeignKey=true)]
		public Churches Churches
		{
			get
			{
				return this._Churches.Entity;
			}
			set
			{
				Churches previousValue = this._Churches.Entity;
				if (((previousValue != value) 
							|| (this._Churches.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Churches.Entity = null;
						previousValue.Users_Churches.Remove(this);
					}
					this._Churches.Entity = value;
					if ((value != null))
					{
						value.Users_Churches.Add(this);
						this._ChurchId = value.ChurchId;
					}
					else
					{
						this._ChurchId = default(int);
					}
					this.SendPropertyChanged("Churches");
				}
			}
		}
		
		[Association(Name="FK_Users_Churches_Users_0", Storage="_Users", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Users_Churches.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Users_Churches.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class Sp_helpdiagramdefinitionResult
	{
		
		private System.Nullable<int> _Version;
		
		private System.Data.Linq.Binary _Definition;
		
		public Sp_helpdiagramdefinitionResult()
		{
		}
		
		[Column(Name="version", Storage="_Version", DbType="Int")]
		public System.Nullable<int> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Name="definition", Storage="_Definition", DbType="VarBinary(MAX)", CanBeNull=true)]
		public System.Data.Linq.Binary Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this._Definition = value;
				}
			}
		}
	}
	
	public partial class Sp_helpdiagramsResult
	{
		
		private string _Database;
		
		private string _Name;
		
		private System.Nullable<int> _ID;
		
		private string _Owner;
		
		private System.Nullable<int> _OwnerID;
		
		public Sp_helpdiagramsResult()
		{
		}
		
		[Column(Storage="_Database", DbType="NVarChar(128)")]
		public string Database
		{
			get
			{
				return this._Database;
			}
			set
			{
				if ((this._Database != value))
				{
					this._Database = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NVarChar(128)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this._Owner = value;
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
